from typing import Protocol, runtime_checkable
from decimal import Decimal

from .models import Balance, Order, Position, SymbolInfo, FundingRate, Orderbook, Volume24h, PositionSide


@runtime_checkable
class PriceProvider(Protocol):
  def get_price(self, symbol: str) -> float | None: ...
  
  def get_price_unsafe(self, symbol: str) -> float: ...
  
  def has_price(self, symbol: str) -> bool: ...
  
  @property
  def prices(self) -> dict[str, float]: ...


@runtime_checkable
class ExchangeClient(Protocol):
  price_monitor: PriceProvider
  
  async def buy_market(self, symbol: str, size: float) -> Order: ...
  
  async def sell_market(self, symbol: str, size: float) -> Order: ...
  
  async def get_positions(self) -> list[Position]: ...
  
  async def get_balance(self) -> Balance: ...
  
  async def set_leverage(self, symbol: str, leverage: int) -> None: ...
  
  async def set_leverages(self, leverages: dict[str, int]) -> None: ...
  
  def get_symbol_info(self, symbol: str) -> SymbolInfo | None: ...

  async def get_funding_rate(self, symbol: str) -> FundingRate: ...

  async def get_orderbook(self, symbol: str, depth: int = 20) -> Orderbook: ...

  async def get_24h_volume(self, symbol: str) -> Volume24h: ...

  async def estimate_fill_price(self, symbol: str, size: float, side: PositionSide, depth: int = 100) -> Decimal: ...
